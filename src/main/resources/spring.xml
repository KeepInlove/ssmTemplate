<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--扫描组件(排除控制层)-->
    <context:component-scan base-package="com.gxy">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入jdbc文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--##### 数据库连接池配置 ##### -->
    <bean id="dataSource"
          class="com.gxy.common.DynamicDataSource">
        <property name="defaultTargetDataSource" ref="postgresqlDS" /><!--设置默认数据源 -->
        <property name="targetDataSources"><!--设置多个数据源 -->
            <map>
<!--                <entry key="mysqlDataSource" value-ref="mysqlDS" />-->
                <entry key="postgresqlDataSource" value-ref="postgresqlDS" />
            </map>
        </property>
    </bean>
    <!-- mysql数据源 -->
 <!--   <bean name="mysqlDS"
          class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
        &lt;!&ndash; 初始化连接大小 &ndash;&gt;
        <property name="initialSize" value="${initialSize}" />
        &lt;!&ndash; 连接池最大使用连接数量 &ndash;&gt;
        <property name="maxActive" value="${maxActive}" />
        &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
        <property name="minIdle" value="${minIdle}" />
        &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
        <property name="maxWait" value="${maxWait}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
        <property name="timeBetweenEvictionRunsMillis"
                  value="${timeBetweenEvictionRunsMillis}" />
        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
        <property name="minEvictableIdleTimeMillis"
                  value="${minEvictableIdleTimeMillis}" />
        &lt;!&ndash; 打开removeAbandoned功能 &ndash;&gt;
        <property name="removeAbandoned" value="${removeAbandoned}" />
        &lt;!&ndash; 7200秒，也就是2小时 &ndash;&gt;
        <property name="removeAbandonedTimeout"
                  value="${removeAbandonedTimeout}" />
        &lt;!&ndash; 不关闭abanded连接时输出错误日志 &ndash;&gt;
        <property name="logAbandoned" value="${logAbandoned}" />
        &lt;!&ndash; 监控数据库 &ndash;&gt;
        <property name="filters" value="${filters}" />
    </bean>-->
    <!-- postgresql数据源 -->
    <bean id="postgresqlDS" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <property name="driverClassName" value="${postgresql.driver}"/>
        <property name="url" value="${postgresql.url}" />
        <property name="username" value="${postgresql.username}" />
        <property name="password" value="${postgresql.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${maxActive}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}" />
        <property name="validationQuery" value="${validationQuery}" />
        <property name="testOnBorrow" value="${testOnBorrow}" />
        <property name="testOnReturn" value="${testOnReturn}" />
        <property name="testWhileIdle" value="${testWhileIdle}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"
                  value="${timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"
                  value="${minEvictableIdleTimeMillis}" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${removeAbandoned}" />
        <!-- 7200秒，也就是2小时 -->
        <property name="removeAbandonedTimeout"
                  value="${removeAbandonedTimeout}" />
        <!-- 不关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="${logAbandoned}" />
        <!-- 监控数据库 -->
        <property name="filters" value="${filters}" />
    </bean>
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--开启事务的注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--配置SqlSessionFactoryBean,可以直接在Spring的IOC获取sessionFactory-->
    <bean id="sessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置mybatis的核心配置文件和路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.gxy.pojo"/>
        <!--映射文件包和Mapper.xml接口的包不一致时需要设置-->
<!--        <property name="mapperLocations" value="classpath:com/gxy/mapper/*.xml"/>-->
        <!--在Mybatis配置-->
        <!--<property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor"/>
            </array>
        </property>-->
    </bean>
    <!--配置Mapper接口的扫描,可以将指定包下所有的mapper接口,通过sqlSession创建代理实现类对象,并将这些对象交给IOC容器管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gxy.mapper"/>
    </bean>
</beans>